generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  name         String
  password     String
  phone        String?
  avatar       String?
  Address      Address       @relation(fields: [addressId], references: [id])
  addressId    String        @unique
  refreshToken String?       @unique
  pets         Pet[]         @relation("guardian")
  enabled      Boolean
  comments     Comment[]
  petFollowing UserFollows[] @relation("userFollower")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Pet {
  id            String        @id @default(uuid())
  username      String        @unique
  name          String
  birthdate     DateTime
  avatar        String?
  size          DogSize       @default(MEDIUM)
  height        Float?
  weight        Float?
  Category      Category      @relation(fields: [categoryId], references: [id])
  categoryId    String
  Breed         Breed         @relation(fields: [breedId], references: [id])
  breedId       String
  Guardian      User          @relation("guardian", fields: [guardianId], references: [id])
  guardianId    String
  adoption      Boolean       @default(false)
  procreation   Boolean       @default(false)
  posts         Post[]
  comments      Comment[]
  userFollowers UserFollows[] @relation("userFollowing")
  petFollowers  PetFollows[]  @relation("petFollowing")
  petFollowing  PetFollows[]  @relation("petFollower")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Category {
  id        String   @id @default(uuid())
  name      String
  about     String
  pets      Pet[]
  breeds    Breed[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Breed {
  id         String   @id @default(uuid())
  name       String
  about      String
  Category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
  pets       Pet[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Address {
  id        String   @id @default(uuid())
  zipcode   String?
  street    String?
  number    String?
  city      String?
  state     String?
  country   String
  User      User?
  Company   Company?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Company {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String
  phone     String?
  photo     String?
  Address   Address  @relation(fields: [addressId], references: [id])
  addressId String   @unique
  enabled   Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Service {
  id        String   @id @default(uuid())
  name      String
  about     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id        String   @id @default(uuid())
  name      String
  about     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id        String    @id @default(uuid())
  image     String?
  text      String
  Pet       Pet?      @relation(fields: [petId], references: [id])
  petId     String?
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id        String   @id @default(uuid())
  text      String
  Post      Post?    @relation(fields: [postId], references: [id])
  postId    String?
  Pet       Pet?     @relation(fields: [petId], references: [id])
  petId     String?
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserFollows {
  follower    User     @relation("userFollower", fields: [followerId], references: [id])
  followerId  String
  following   Pet      @relation("userFollowing", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@id([followerId, followingId])
}

model PetFollows {
  follower    Pet      @relation("petFollower", fields: [followerId], references: [id])
  followerId  String
  following   Pet      @relation("petFollowing", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@id([followerId, followingId])
}

enum DogSize {
  SMALL
  MEDIUM
  BIG
}
